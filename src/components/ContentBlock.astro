---
import Button from './Button.astro';
import SvgIcon from './SvgIcon.astro';

export interface Props {
  icon: string;
  title: string;
  content: string;
  section?: {
    title: string;
    content: string;
    icon: string;
  }[];
  button?: {
    title: string;
    color?: string;
  }[];
  id: string;
  direction: "left" | "right";
}

const { icon, title, content, section, button, id, direction } = Astro.props;
---

<section class="content-section">
  <div class="fade-container" data-direction={direction}>
    <div class={`content-row ${direction}`} id={id}>
      <div class="icon-col">
        <SvgIcon src={icon} width="100%" height="100%" />
      </div>
      <div class="content-col">
        <div class="content-wrapper">
          <h6>{title}</h6>
          <p class="content-text">{content}</p>
          
          {direction === "right" ? (
            <div class="button-wrapper">
              {button && button.map((item) => (
                <Button 
                  color={item.color} 
                  onClick="scrollToSection('about')"
                >
                  {item.title}
                </Button>
              ))}
            </div>
          ) : (
            <div class="service-wrapper">
              <div class="service-row">
                {section && section.map((item) => (
                  <div class="service-col">
                    <SvgIcon
                      src={item.icon}
                      width="60px"
                      height="60px"
                    />
                    <h6 class="min-title">{item.title}</h6>
                    <p class="min-para">{item.content}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .content-section {
    position: relative;
    padding: 10rem 0 8rem;
  }

  @media only screen and (max-width: 1024px) {
    .content-section {
      padding: 4rem 0 4rem;
    }
  }

  .fade-container {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease-out;
  }

  .fade-container.fade-in {
    opacity: 1;
    transform: translateY(0);
  }

  .content-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .content-row.right {
    flex-direction: row-reverse;
  }

  .icon-col {
    flex: 1;
    min-width: 300px;
    max-width: 500px;
  }

  .content-col {
    flex: 1;
    min-width: 300px;
  }

  @media only screen and (max-width: 768px) {
    .content-row {
      flex-direction: column;
    }
    
    .content-row.right {
      flex-direction: column;
    }

    .icon-col,
    .content-col {
      min-width: 100%;
    }
  }

  .content-wrapper {
    position: relative;
    max-width: 540px;
  }

  @media only screen and (max-width: 575px) {
    .content-wrapper {
      padding-top: 4rem;
    }
  }

  .content-wrapper h6 {
    font-size: 2.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: #18216d;
    line-height: 1.2;
  }

  .content-text {
    margin: 1.5rem 0 2rem 0;
    font-size: 1rem;
    line-height: 1.6;
    color: #18216d;
  }

  .service-wrapper {
    display: flex;
    justify-content: space-between;
    max-width: 100%;
  }

  .service-row {
    display: flex;
    justify-content: space-between;
    width: 100%;
    gap: 2rem;
  }

  .service-col {
    flex: 1;
    min-width: 45%;
  }

  @media only screen and (max-width: 768px) {
    .service-row {
      flex-direction: column;
      gap: 2rem;
    }
    
    .service-col {
      min-width: 100%;
    }
  }

  .min-title {
    font-size: 15px;
    line-height: 1rem;
    padding: 0.5rem 0;
    text-transform: uppercase;
    color: #000;
    font-family: "Motiva Sans Light", sans-serif;
    margin: 0;
  }

  .min-para {
    font-size: 13px;
    margin: 0;
    color: #18216d;
  }

  .button-wrapper {
    display: flex;
    justify-content: space-between;
    max-width: 100%;
    gap: 20px;
  }

  @media screen and (min-width: 1024px) {
    .button-wrapper {
      max-width: 80%;
    }
  }

  @media only screen and (max-width: 768px) {
    .button-wrapper {
      flex-direction: column;
      gap: 1rem;
    }
  }
</style>

<script>
  // Scroll functionality
  function scrollToSection(id: string) {
    const element = document.getElementById(id);
    if (element) {
      element.scrollIntoView({
        behavior: "smooth",
      });
    }
  }

  // Make scrollToSection available globally
  (window as any).scrollToSection = scrollToSection;

  // Intersection Observer for fade-in animation
  document.addEventListener('DOMContentLoaded', () => {
    const fadeElements = document.querySelectorAll('.fade-container');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in');
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    fadeElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>
