---
export interface Props {
  color?: string;
  onClick?: string;
  class?: string;
}

const { color, onClick, class: className } = Astro.props;
---

<button 
  class={`btn ${className || ''}`}
  data-color={color}
  onclick={onClick}
>
  <slot />
</button>

<style>
  .btn {
    background: var(--btn-bg, #2e186a);
    color: var(--btn-color, #fff);
    font-size: 1rem;
    font-weight: 700;
    width: 100%;
    border: 1px solid #edf3f5;
    border-radius: 4px;
    padding: 13px 0;
    cursor: pointer;
    margin-top: 0.625rem;
    max-width: 180px;
    transition: all 0.3s ease-in-out;
    box-shadow: 0 16px 30px rgb(23 31 114 / 20%);
  }

  .btn:hover,
  .btn:active,
  .btn:focus {
    color: #fff;
    border: 1px solid rgb(255, 130, 92);
    background-color: rgb(255, 130, 92);
  }

  /* Handle color prop */
  .btn[data-color] {
    --btn-bg: attr(data-color);
    --btn-color: #2e186a;
  }

  .btn[data-color=""] {
    --btn-bg: #2e186a;
    --btn-color: #fff;
  }
</style>

<script>
  // Handle dynamic color styling
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.btn[data-color]');
    buttons.forEach((button) => {
      const color = button.getAttribute('data-color');
      if (color && color !== '') {
        button.style.setProperty('--btn-bg', color);
        button.style.setProperty('--btn-color', '#2e186a');
      }
    });
  });
</script>
